datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model AccessProfile {
  id               Int                   @id @default(autoincrement())
  name             String
  permissions      Permission[]
  accessProfileAssets  AccessProfileAsset[]
  userAccessProfiles   UserAccessProfile[]
}

model Company {
  id         Int         @id @default(autoincrement())
  name       String
  users      User[]
  portfolios Portfolio[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  firstName  String
  lastName   String
  role       UserRole  // added role field
  companyId  Int?      // changed from Int to Int?
  company    Company?  @relation(fields: [companyId], references: [id])
  userAssets UserAsset[]
  userAccessProfiles UserAccessProfile[]
  ownedRegulationUnits   RegulationUnit[]    @relation("RegulationUnitOwner")
}

model Module {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  parentId    Int?
  parent      Module?    @relation("Submodules", fields: [parentId], references: [id])
  submodules  Module[]   @relation("Submodules")
  permissions Permission[]
}

enum PermissionType {
  VIEW
  MANAGE
}

model Permission {
  id                Int             @id @default(autoincrement())
  accessProfileId   Int
  moduleId          Int
  permission        PermissionType  @default(VIEW)
  accessProfile     AccessProfile   @relation(fields: [accessProfileId], references: [id])
  module            Module          @relation(fields: [moduleId], references: [id])
  @@unique([accessProfileId, moduleId])
}

model Portfolio {
  id         Int         @id @default(autoincrement())
  name       String
  companyId  Int
  company    Company     @relation(fields: [companyId], references: [id])
  groups     RegulationGroup[]
}

model RegulationGroup {
  id          Int               @id @default(autoincrement())
  name        String
  portfolio   Portfolio         @relation(fields: [portfolioId], references: [id])
  portfolioId Int
  units       RegulationUnit[]
}

model RegulationUnit {
  id       Int              @id @default(autoincrement())
  name     String
  group    RegulationGroup  @relation(fields: [groupId], references: [id])
  groupId  Int
  ownerId  Int
  owner    User             @relation(fields: [ownerId], references: [id], name: "RegulationUnitOwner")
}

model ActiveUser {
  id       Int      @id @default(1)
  userId   Int
  updatedAt DateTime @updatedAt
}

model AccessProfileAsset {
  id               Int             @id @default(autoincrement())
  accessProfileId   Int
  assetId          Int
  assetType        String          // e.g., "Portfolio", "RegulationGroup", "RegulationUnit"
  accessProfile    AccessProfile   @relation(fields: [accessProfileId], references: [id])
  @@unique([accessProfileId, assetId, assetType])
}

model UserAsset {
  id        Int      @id @default(autoincrement())
  userId    Int
  assetId   Int
  assetType String   // e.g., "Portfolio", "RegulationGroup", "RegulationUnit"
  user      User     @relation(fields: [userId], references: [id])
  @@unique([userId, assetId, assetType])
}

model UserAccessProfile {
  id               Int          @id @default(autoincrement())
  userId           Int
  accessProfileId   Int
  assetId          Int
  assetType        String
  user             User         @relation(fields: [userId], references: [id])
  accessProfile    AccessProfile   @relation(fields: [accessProfileId], references: [id])
  @@unique([userId, accessProfileId, assetId, assetType])
}

enum UserRole {
  SUPER_ADMIN
  COMPANY_MANAGER
  PORTFOLIO_MANAGER
  REG_GROUP_MANAGER
  UNIT_MANAGER
}