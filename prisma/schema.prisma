datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String
  permissions Permission[]
  users       User[]
  // (Global roles remain for the app as a whole.)
}

model User {
  id                          Int                          @id @default(autoincrement())
  email                       String                       @unique
  roles                       Role[]
  userGroupPermissions        UserGroupPermission[]
  userPortfolioPermissions    UserPortfolioPermission[]
  userUnitPermissions         UserUnitPermission[]
}

model Module {
  id          Int      @id @default(autoincrement())
  name        String
  parentId    Int?
  parent      Module?    @relation("Submodules", fields: [parentId], references: [id])
  submodules  Module[]   @relation("Submodules")
  permissions Permission[]
}

model Permission {
  id        Int     @id @default(autoincrement())
  roleId    Int
  moduleId  Int
  canView   Boolean @default(false)
  canEdit   Boolean @default(false)
  canDelete Boolean @default(false)
  canCreate Boolean @default(false)
  role      Role    @relation(fields: [roleId], references: [id])
  module    Module    @relation(fields: [moduleId], references: [id])
  @@unique([roleId, moduleId])
}

model Portfolio {
  id                         Int                         @id @default(autoincrement())
  name                       String
  groups                     RegulationGroup[]
  userPortfolioPermissions   UserPortfolioPermission[]
}

model RegulationGroup {
  id                        Int                      @id @default(autoincrement())
  name                      String
  portfolio                 Portfolio                @relation(fields: [portfolioId], references: [id])
  portfolioId               Int
  units                     RegulationUnit[]
  userGroupPermissions      UserGroupPermission[]
}

model RegulationUnit {
  id                        Int                      @id @default(autoincrement())
  name                      String
  group                     RegulationGroup          @relation(fields: [groupId], references: [id])
  groupId                   Int
  userUnitPermissions       UserUnitPermission[]
}

model UserGroupPermission {
  id        Int              @id @default(autoincrement())
  userId    Int
  groupId   Int
  canView   Boolean          @default(false)
  canEdit   Boolean          @default(false)
  canDelete Boolean          @default(false)
  canCreate Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
  group     RegulationGroup  @relation(fields: [groupId], references: [id])
  @@unique([userId, groupId])
}

model UserPortfolioPermission {
  id           Int         @id @default(autoincrement())
  userId       Int
  portfolioId  Int
  canView      Boolean     @default(false)
  canEdit      Boolean     @default(false)
  canDelete    Boolean     @default(false)
  canCreate    Boolean     @default(false)
  user         User        @relation(fields: [userId], references: [id])
  portfolio    Portfolio   @relation(fields: [portfolioId], references: [id])
  @@unique([userId, portfolioId])
}

model UserUnitPermission {
  id        Int                @id @default(autoincrement())
  userId    Int
  unitId    Int
  canView   Boolean            @default(false)
  canEdit   Boolean            @default(false)
  canDelete Boolean            @default(false)
  canCreate Boolean            @default(false)
  user      User               @relation(fields: [userId], references: [id])
  unit      RegulationUnit     @relation(fields: [unitId], references: [id])
  @@unique([userId, unitId])
}

model ActiveUser {
  id       Int      @id @default(1)
  userId   Int
  updatedAt DateTime @updatedAt
}