datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String
  permissions Permission[]
  roleAssets  RoleAsset[]
  userAssetRoles UserAssetRole[]
}

model Company {
  id         Int         @id @default(autoincrement())
  name       String
  users      User[]
  portfolios Portfolio[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  firstName  String
  lastName   String
  companyId  Int
  company    Company   @relation(fields: [companyId], references: [id])
  userAssets UserAsset[]
  userAssetRoles UserAssetRole[]
  // Inverse relations for ownership using the predefined relation names
  ownedPortfolios        Portfolio[]         @relation("PortfolioOwner")
  ownedRegulationGroups  RegulationGroup[]   @relation("RegulationGroupOwner")
  ownedRegulationUnits   RegulationUnit[]    @relation("RegulationUnitOwner")
}

model Module {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  parentId    Int?
  parent      Module?    @relation("Submodules", fields: [parentId], references: [id])
  submodules  Module[]   @relation("Submodules")
  permissions Permission[]
}

enum PermissionType {
  VIEW
  MANAGE
}

model Permission {
  id         Int            @id @default(autoincrement())
  roleId     Int
  moduleId   Int
  permission PermissionType @default(VIEW)
  role       Role           @relation(fields: [roleId], references: [id])
  module     Module         @relation(fields: [moduleId], references: [id])
  @@unique([roleId, moduleId])
}

model Portfolio {
  id         Int         @id @default(autoincrement())
  name       String
  companyId  Int
  company    Company     @relation(fields: [companyId], references: [id])
  ownerId    Int
  owner      User        @relation(fields: [ownerId], references: [id], name: "PortfolioOwner")
  groups     RegulationGroup[]
}

model RegulationGroup {
  id          Int               @id @default(autoincrement())
  name        String
  portfolio   Portfolio         @relation(fields: [portfolioId], references: [id])
  portfolioId Int
  ownerId     Int
  owner       User              @relation(fields: [ownerId], references: [id], name: "RegulationGroupOwner")
  units       RegulationUnit[]
}

model RegulationUnit {
  id       Int              @id @default(autoincrement())
  name     String
  group    RegulationGroup  @relation(fields: [groupId], references: [id])
  groupId  Int
  ownerId  Int
  owner    User             @relation(fields: [ownerId], references: [id], name: "RegulationUnitOwner")
}

model ActiveUser {
  id       Int      @id @default(1)
  userId   Int
  updatedAt DateTime @updatedAt
}

model RoleAsset {
  id        Int      @id @default(autoincrement())
  roleId    Int
  assetId   Int
  assetType String   // e.g., "Portfolio", "RegulationGroup", "RegulationUnit"
  role      Role     @relation(fields: [roleId], references: [id])
  @@unique([roleId, assetId, assetType])
}

model UserAsset {
  id        Int      @id @default(autoincrement())
  userId    Int
  assetId   Int
  assetType String   // e.g., "Portfolio", "RegulationGroup", "RegulationUnit"
  user      User     @relation(fields: [userId], references: [id])
  @@unique([userId, assetId, assetType])
}

model UserAssetRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  assetId   Int
  assetType String
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  @@unique([userId, roleId, assetId, assetType])
}